{"ast":null,"code":"var _jsxFileName = \"/home/wellington/\\xC1rea de Trabalho/projects/sd-016-b-project-recipes-app/src/pages/ExploreIngredients.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Context from '../context/Context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst fetchIngredients = set => {\n  fetch('https://www.themealdb.com/api/json/v1/1/list.php?i=list').then(r => r.json()).then(d => set(d));\n};\n\nconst fetchDrinkIngredients = set => {\n  fetch('https://www.thecocktaildb.com/api/json/v1/1/list.php?i=list').then(r => r.json()).then(d => set({\n    meals: d.drinks.map((i, k) => ({\n      strIngredient: i.strIngredient1,\n      idIngredient: k\n    }))\n  }));\n};\n\nconst cards = (recipes, handleClick, ford) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"foods-cards-container\",\n  children: recipes.map((_ref, k) => {\n    let {\n      strIngredient\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"food-card\",\n      \"data-testid\": `${k}-ingredient-card`,\n      onClick: () => handleClick(strIngredient),\n      type: \"button\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        \"data-testid\": `${k}-card-name`,\n        children: strIngredient\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: ford === 'foods' ? `https://www.themealdb.com/images/ingredients/${strIngredient}-Small.png` : `https://www.thecocktaildb.com/images/ingredients/${strIngredient}-Small.png`,\n        alt: strIngredient,\n        \"data-testid\": `${k}-card-img`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, k, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this);\n  })\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 19,\n  columnNumber: 3\n}, this);\n\nexport default function ExploreIngredients() {\n  _s();\n\n  const history = useHistory();\n  const ford = history.location.pathname.split('/')[2]; // Foods OR Drinks\n\n  const {\n    apiDrinkFetcher,\n    apiFoodFetcher,\n    recipes\n  } = useContext(Context);\n  const [ingredients, setIngredients] = useState([]);\n  const [redirect, setRedirect] = useState(false);\n  useEffect(() => {\n    if (ford === 'foods') {\n      fetchIngredients(setIngredients);\n    } else {\n      fetchDrinkIngredients(setIngredients);\n    }\n  }, [ford]);\n\n  const handleClick = ingredient => {\n    if (ford === 'foods') {\n      apiFoodFetcher('ingredient', ingredient);\n    } else {\n      apiDrinkFetcher('ingredient', ingredient);\n    }\n\n    setRedirect(true);\n  };\n\n  useEffect(() => {\n    if (redirect) {\n      history.push(`/${ford}`);\n    }\n  }, [recipes]);\n  const r = {\n    meals: [...(ingredients.meals || [])]\n  };\n  const max = 12;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: cards(r.meals ? r.meals.splice(0, max) : [], handleClick, ford)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ExploreIngredients, \"NtLddp/FZ8SdMgz7WAo/QrodfoU=\", false, function () {\n  return [useHistory];\n});\n\n_c = ExploreIngredients;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExploreIngredients\");","map":{"version":3,"sources":["/home/wellington/Área de Trabalho/projects/sd-016-b-project-recipes-app/src/pages/ExploreIngredients.jsx"],"names":["React","useContext","useEffect","useState","useHistory","Context","fetchIngredients","set","fetch","then","r","json","d","fetchDrinkIngredients","meals","drinks","map","i","k","strIngredient","strIngredient1","idIngredient","cards","recipes","handleClick","ford","ExploreIngredients","history","location","pathname","split","apiDrinkFetcher","apiFoodFetcher","ingredients","setIngredients","redirect","setRedirect","ingredient","push","max","splice"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Context from '../context/Context';\n\nconst fetchIngredients = (set) => {\n  fetch('https://www.themealdb.com/api/json/v1/1/list.php?i=list')\n    .then((r) => r.json()).then((d) => set(d));\n};\n\nconst fetchDrinkIngredients = (set) => {\n  fetch('https://www.thecocktaildb.com/api/json/v1/1/list.php?i=list')\n    .then((r) => r.json())\n    .then((d) => set({\n      meals: d.drinks.map((i, k) => ({ strIngredient: i.strIngredient1,\n        idIngredient: k })) }));\n};\n\nconst cards = (recipes, handleClick, ford) => (\n  <div className=\"foods-cards-container\">\n    {recipes.map(({ strIngredient }, k) => (\n      <button\n        className=\"food-card\"\n        key={ k }\n        data-testid={ `${k}-ingredient-card` }\n        onClick={ () => handleClick(strIngredient) }\n        type=\"button\"\n      >\n        <p data-testid={ `${k}-card-name` }>{strIngredient}</p>\n        <img\n          src={ ford === 'foods'\n            ? `https://www.themealdb.com/images/ingredients/${strIngredient}-Small.png`\n            : `https://www.thecocktaildb.com/images/ingredients/${strIngredient}-Small.png` }\n          alt={ strIngredient }\n          data-testid={ `${k}-card-img` }\n        />\n      </button>\n    ))}\n  </div>\n);\n\nexport default function ExploreIngredients() {\n  const history = useHistory();\n  const ford = history.location.pathname.split('/')[2]; // Foods OR Drinks\n  const { apiDrinkFetcher, apiFoodFetcher, recipes } = useContext(Context);\n  const [ingredients, setIngredients] = useState([]);\n  const [redirect, setRedirect] = useState(false);\n  useEffect(() => {\n    if (ford === 'foods') {\n      fetchIngredients(setIngredients);\n    } else { fetchDrinkIngredients(setIngredients); }\n  }, [ford]);\n\n  const handleClick = (ingredient) => {\n    if (ford === 'foods') {\n      apiFoodFetcher('ingredient', ingredient);\n    } else { apiDrinkFetcher('ingredient', ingredient); }\n    setRedirect(true);\n  };\n\n  useEffect(() => { if (redirect) { history.push(`/${ford}`); } }, [recipes]);\n\n  const r = { meals: [...ingredients.meals || []] };\n  const max = 12;\n  return (\n    <div>{ cards(r.meals ? r.meals.splice(0, max) : [], handleClick, ford)}</div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}